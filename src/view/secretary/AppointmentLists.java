/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.secretary;

import dao.AppointmentDao;
import dao.CrenelDao;
import dao.DoctorDao;
import dao.PatientFolderDao;
import dao.RoleDao;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.table.DefaultTableModel;
import model.AppointmentModel;
import model.CrenelModel;
import model.DoctorModel;
import model.PatientFolderModel;
import model.RoleModel;
import test.dropdownTest;

/**
 *
 * @author bynan
 */
public class AppointmentLists extends javax.swing.JInternalFrame {

    /**
     * Creates new form AppointmentLists
     */
    public AppointmentLists() throws SQLException {
        initComponents();
        initComboLists();
        namesComboBox.setEnabled(false);
        initAppointmentTable("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        specialitiesComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        namesComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();

        setClosable(true);
        setTitle("Liste des rendez-vous");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Opérations"));

        jLabel1.setText("Spécialité");

        specialitiesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        specialitiesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                specialitiesComboBoxItemStateChanged(evt);
            }
        });
        specialitiesComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                specialitiesComboBoxMouseClicked(evt);
            }
        });
        specialitiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specialitiesComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Médecin");

        jButton1.setText("Nouveau rendez-vous");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        namesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        namesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namesComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(236, 143, 50));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ic_refresh_black_18dp.png"))); // NOI18N
        jLabel3.setToolTipText("Cliquez ici pour actualiser.");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(specialitiesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(namesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(specialitiesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jButton1)
                        .addComponent(namesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des rendez-vous"));

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(appointmentTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 67, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void specialitiesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_specialitiesComboBoxItemStateChanged

    }//GEN-LAST:event_specialitiesComboBoxItemStateChanged

    private void specialitiesComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_specialitiesComboBoxMouseClicked

    }//GEN-LAST:event_specialitiesComboBoxMouseClicked

    private void specialitiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specialitiesComboBoxActionPerformed
        try {
            RoleModel docMods = (RoleModel) specialitiesComboBox.getSelectedItem();
            this.keyOf = docMods.getIdRole();

            DoctorDao mdcNameDao = new DoctorDao();
            List<DoctorModel> listMdcNames = mdcNameDao.medicsByKey(keyOf);

            for (Object m : listMdcNames) {
                DoctorModel mdc = (DoctorModel) m;
                comboModelNames.addElement(mdc);
            }

            DoctorDao numberDao = new DoctorDao();
            int nbr = numberDao.countMedics(keyOf);
            int sizeOfDropdown = comboModelNames.getSize();

            if (sizeOfDropdown != nbr) {
                int toDelete = sizeOfDropdown - nbr;
                for (int j = 0; j < toDelete; j++) {
                    comboModelNames.removeElementAt(j);
                }
            }
            this.namesComboBox.setModel(comboModelNames);
            namesComboBox.setEnabled(true);

        } catch (SQLException ex) {
            Logger.getLogger(dropdownTest.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_specialitiesComboBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            newAppointment();
        } catch (SQLException ex) {
            Logger.getLogger(AppointmentLists.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void namesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namesComboBoxActionPerformed
        DoctorModel docModel = (DoctorModel) namesComboBox.getSelectedItem();
        String key = String.valueOf(docModel.getId());
        try {
            initAppointmentTable(key);
        } catch (SQLException ex) {
            Logger.getLogger(AppointmentLists.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_namesComboBoxActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        try {
            initAppointmentTable("");
        } catch (SQLException ex) {
            Logger.getLogger(AppointmentLists.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel3MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appointmentTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> namesComboBox;
    private javax.swing.JComboBox<String> specialitiesComboBox;
    // End of variables declaration//GEN-END:variables
    private final DefaultComboBoxModel combModelMdcSpeciality = new DefaultComboBoxModel();
    private final DefaultComboBoxModel comboModelNames = new DefaultComboBoxModel();
    public int keyOf;

    private void initAppointmentTable(String filter) throws SQLException {
        String[] columnNames = {"#", "Patient", "Médecin", "Spécialité", "Date", "Créneau"};

        DefaultTableModel tbMdl = new DefaultTableModel(columnNames, 0);

        tbMdl.setColumnCount(6);

        AppointmentDao appointDao = new AppointmentDao();
        DoctorDao doctDao = new DoctorDao();
        CrenelDao crenelDao = new CrenelDao();
        PatientFolderDao pflDao = new PatientFolderDao();
        RoleDao roleDao = new RoleDao();

        List<AppointmentModel> listAppointment = new ArrayList();

        if (filter.equals("")) {
            listAppointment = appointDao.selectAllAppointment();
        } else {
            listAppointment = appointDao.selectAllAppointmentByMedicId(filter);
        }

        for (AppointmentModel a : listAppointment) {
            AppointmentModel rdz = (AppointmentModel) a;

            DoctorModel doc = doctDao.selectById(a.getMedic_id());
            CrenelModel crnl = crenelDao.selectById(a.getCrenel_id());
            PatientFolderModel pfldr = pflDao.findByIdOnAppointment(a.getPatient_folder_id());
            RoleModel role = roleDao.selectById(doc.getRole_id());

            tbMdl.addRow(new Object[]{
                a.getId(),
                pfldr,
                doc,
                role,
                a.getDate(),
                crnl,});
        }
        appointmentTable.setModel(tbMdl);

    }

    private void initComboLists() throws SQLException {
        RoleDao mdcDao = new RoleDao();
        List<RoleModel> listMdc = mdcDao.selectRole();
        for (Object m : listMdc) {
            RoleModel mdc = (RoleModel) m;
            combModelMdcSpeciality.addElement(mdc);
        }
        this.specialitiesComboBox.setModel(combModelMdcSpeciality);

    }

    private void newAppointment() throws SQLException {
        Appointment appoint = new Appointment();
        JDesktopPane desktopPane = getDesktopPane();
        desktopPane.add(appoint);
        appoint.setVisible(true);
        this.setVisible(false);
        appoint.toFront();
    }
}
